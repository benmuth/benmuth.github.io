<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>ben's blog</title><link>https://benmuth.github.io/</link><description>Recent content on ben's blog</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Wed, 14 Jun 2023 11:55:00 -0500</lastBuildDate><atom:link href="https://benmuth.github.io/index.xml" rel="self" type="application/rss+xml"/><item><title>Monitor Goroutines</title><link>https://benmuth.github.io/posts/monitor-goroutines/</link><pubDate>Wed, 14 Jun 2023 11:55:00 -0500</pubDate><guid>https://benmuth.github.io/posts/monitor-goroutines/</guid><description>This is about a small refactoring I did to fix some data races using basic Go concurrency primitives. This might be interesting to you if you&amp;rsquo;re familiar with Go&amp;rsquo;s concurrency model but haven&amp;rsquo;t played with it much.
Recently, I had to deal with data races for the first time while working on a collaborative terminal text editor. After adding a new feature, I ran the program through Go&amp;rsquo;s handy dandy data race detector, and unfortunately, it was not very happy with me.</description></item></channel></rss>